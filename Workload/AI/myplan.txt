module.app-service.data.azurerm_client_config.main: Reading...
azurerm_resource_group.network: Refreshing state... [id=/subscriptions/c07b4d90-1ac5-4b47-97d0-0c5bbac825d9/resourceGroups/rg-network]
module.app-service.data.azurerm_client_config.main: Read complete after 0s [id=Y2xpZW50Q29uZmlncy9jbGllbnRJZD0wNGIwNzc5NS04ZGRiLTQ2MWEtYmJlZS0wMmY5ZTFiZjdiNDY7b2JqZWN0SWQ9MjkyNDJkODktZDJhOC00YTAxLWFlMjEtZjFmZDlhNmZmNjYwO3N1YnNjcmlwdGlvbklkPWMwN2I0ZDkwLTFhYzUtNGI0Ny05N2QwLTBjNWJiYWM4MjVkOTt0ZW5hbnRJZD0xNmIzYzAxMy1kMzAwLTQ2OGQtYWM2NC03ZWRhMDgyMGI2ZDM=]
module.app-service.azurerm_resource_group.rg[0]: Refreshing state... [id=/subscriptions/c07b4d90-1ac5-4b47-97d0-0c5bbac825d9/resourceGroups/rg-azure-chatgpt-webapp]

Note: Objects have changed outside of Terraform

Terraform detected the following changes made outside of Terraform since the
last "terraform apply" which may have affected this plan:

  # azurerm_resource_group.network has been deleted
  - resource "azurerm_resource_group" "network" {
        id       = "/subscriptions/c07b4d90-1ac5-4b47-97d0-0c5bbac825d9/resourceGroups/rg-network"
      - name     = "rg-network" -> null
        tags     = {}
        # (1 unchanged attribute hidden)
    }


Unless you have made equivalent changes to your configuration, or ignored the
relevant attributes using ignore_changes, the following plan may include
actions to undo or respond to these changes.

─────────────────────────────────────────────────────────────────────────────

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # azurerm_api_management.example will be created
  + resource "azurerm_api_management" "example" {
      + client_certificate_enabled    = false
      + developer_portal_url          = (known after apply)
      + gateway_disabled              = false
      + gateway_regional_url          = (known after apply)
      + gateway_url                   = (known after apply)
      + id                            = (known after apply)
      + location                      = "westeurope"
      + management_api_url            = (known after apply)
      + name                          = (known after apply)
      + notification_sender_email     = (known after apply)
      + policy                        = (known after apply)
      + portal_url                    = (known after apply)
      + private_ip_addresses          = (known after apply)
      + public_ip_addresses           = (known after apply)
      + public_network_access_enabled = true
      + publisher_email               = "company@terraform.io"
      + publisher_name                = "My Company"
      + resource_group_name           = "rg-apim"
      + scm_url                       = (known after apply)
      + sku_name                      = "Developer_1"
      + virtual_network_type          = "Internal"

      + identity {
          + principal_id = (known after apply)
          + tenant_id    = (known after apply)
          + type         = "SystemAssigned"
        }

      + virtual_network_configuration {
          + subnet_id = (known after apply)
        }
    }

  # azurerm_application_gateway.appgateway will be created
  + resource "azurerm_application_gateway" "appgateway" {
      + id                          = (known after apply)
      + location                    = "westeurope"
      + name                        = "apgw-ai-services"
      + private_endpoint_connection = (known after apply)
      + resource_group_name         = "rg-apim"

      + backend_address_pool {
          + fqdns        = (known after apply)
          + id           = (known after apply)
          + ip_addresses = []
          + name         = "my-backend-pool"
        }

      + backend_http_settings {
          + cookie_based_affinity               = "Disabled"
          + id                                  = (known after apply)
          + name                                = "my-backend-http-settings"
          + path                                = "/"
          + pick_host_name_from_backend_address = true
          + port                                = 80
          + probe_id                            = (known after apply)
          + probe_name                          = "http_probe_test"
          + protocol                            = "Http"
          + request_timeout                     = 20
          + trusted_root_certificate_names      = []
        }

      + frontend_ip_configuration {
          + id                            = (known after apply)
          + name                          = "my-frontend-ip-config"
          + private_ip_address            = (known after apply)
          + private_ip_address_allocation = "Dynamic"
          + private_link_configuration_id = (known after apply)
          + public_ip_address_id          = (known after apply)
        }

      + frontend_port {
          + id   = (known after apply)
          + name = "my-frontend-port"
          + port = 80
        }

      + gateway_ip_configuration {
          + id        = (known after apply)
          + name      = "my-gateway-ip-config"
          + subnet_id = (known after apply)
        }

      + http_listener {
          + frontend_ip_configuration_id   = (known after apply)
          + frontend_ip_configuration_name = "my-frontend-ip-config"
          + frontend_port_id               = (known after apply)
          + frontend_port_name             = "my-frontend-port"
          + host_names                     = []
          + id                             = (known after apply)
          + name                           = "my-http-listener"
          + protocol                       = "Http"
          + ssl_certificate_id             = (known after apply)
          + ssl_profile_id                 = (known after apply)
        }

      + probe {
          + host                                      = (known after apply)
          + id                                        = (known after apply)
          + interval                                  = 60
          + minimum_servers                           = 2
          + name                                      = "http_probe_test"
          + path                                      = "/status-0123456789abcdef"
          + pick_host_name_from_backend_http_settings = false
          + protocol                                  = "Http"
          + timeout                                   = 15
          + unhealthy_threshold                       = 2

          + match {
              + status_code = [
                  + "100-999",
                ]
            }
        }

      + request_routing_rule {
          + backend_address_pool_id    = (known after apply)
          + backend_address_pool_name  = "my-backend-pool"
          + backend_http_settings_id   = (known after apply)
          + backend_http_settings_name = "my-backend-http-settings"
          + http_listener_id           = (known after apply)
          + http_listener_name         = "my-http-listener"
          + id                         = (known after apply)
          + name                       = "my-routing-rule"
          + priority                   = 100
          + redirect_configuration_id  = (known after apply)
          + rewrite_rule_set_id        = (known after apply)
          + rule_type                  = "Basic"
          + url_path_map_id            = (known after apply)
        }

      + sku {
          + capacity = 2
          + name     = "WAF_v2"
          + tier     = "WAF_v2"
        }

      + waf_configuration {
          + enabled                  = true
          + file_upload_limit_mb     = 100
          + firewall_mode            = "Prevention"
          + max_request_body_size_kb = 128
          + request_body_check       = true
          + rule_set_type            = "OWASP"
          + rule_set_version         = "3.0"
        }
    }

  # azurerm_cosmosdb_account.example will be created
  + resource "azurerm_cosmosdb_account" "example" {
      + access_key_metadata_writes_enabled       = true
      + analytical_storage_enabled               = false
      + connection_strings                       = (sensitive value)
      + create_mode                              = (known after apply)
      + default_identity_type                    = "FirstPartyIdentity"
      + enable_automatic_failover                = false
      + enable_free_tier                         = false
      + enable_multiple_write_locations          = false
      + endpoint                                 = (known after apply)
      + id                                       = (known after apply)
      + is_virtual_network_filter_enabled        = false
      + kind                                     = "GlobalDocumentDB"
      + local_authentication_disabled            = false
      + location                                 = "westeurope"
      + mongo_server_version                     = (known after apply)
      + name                                     = (known after apply)
      + network_acl_bypass_for_azure_services    = false
      + offer_type                               = "Standard"
      + primary_key                              = (sensitive value)
      + primary_readonly_key                     = (sensitive value)
      + primary_readonly_sql_connection_string   = (sensitive value)
      + primary_sql_connection_string            = (sensitive value)
      + public_network_access_enabled            = true
      + read_endpoints                           = (known after apply)
      + resource_group_name                      = "rg-azure-chatgpt-cosmosdb"
      + secondary_key                            = (sensitive value)
      + secondary_readonly_key                   = (sensitive value)
      + secondary_readonly_sql_connection_string = (sensitive value)
      + secondary_sql_connection_string          = (sensitive value)
      + write_endpoints                          = (known after apply)

      + consistency_policy {
          + consistency_level       = "BoundedStaleness"
          + max_interval_in_seconds = 300
          + max_staleness_prefix    = 100000
        }

      + geo_location {
          + failover_priority = 0
          + id                = (known after apply)
          + location          = "westeurope"
          + zone_redundant    = false
        }
    }

  # azurerm_cosmosdb_sql_container.example will be created
  + resource "azurerm_cosmosdb_sql_container" "example" {
      + account_name          = (known after apply)
      + database_name         = "acgpt-cosmosdb-sqldb"
      + default_ttl           = (known after apply)
      + id                    = (known after apply)
      + name                  = "acgpt-sql-container"
      + partition_key_path    = "/definition/id"
      + partition_key_version = 1
      + resource_group_name   = "rg-azure-chatgpt-cosmosdb"
      + throughput            = 400

      + indexing_policy {
          + indexing_mode = "consistent"

          + excluded_path {
              + path = "/excluded/?"
            }

          + included_path {
              + path = "/*"
            }
          + included_path {
              + path = "/included/?"
            }
        }

      + unique_key {
          + paths = [
              + "/definition/idlong",
              + "/definition/idshort",
            ]
        }
    }

  # azurerm_cosmosdb_sql_database.main will be created
  + resource "azurerm_cosmosdb_sql_database" "main" {
      + account_name        = (known after apply)
      + id                  = (known after apply)
      + name                = "acgpt-cosmosdb-sqldb"
      + resource_group_name = "rg-azure-chatgpt-cosmosdb"
      + throughput          = 400
    }

  # azurerm_log_analytics_workspace.apim-law will be created
  + resource "azurerm_log_analytics_workspace" "apim-law" {
      + allow_resource_only_permissions    = true
      + daily_quota_gb                     = -1
      + id                                 = (known after apply)
      + internet_ingestion_enabled         = true
      + internet_query_enabled             = true
      + local_authentication_disabled      = false
      + location                           = "westeurope"
      + name                               = "logs-apim"
      + primary_shared_key                 = (sensitive value)
      + reservation_capacity_in_gb_per_day = (known after apply)
      + resource_group_name                = "rg-apim"
      + retention_in_days                  = (known after apply)
      + secondary_shared_key               = (sensitive value)
      + sku                                = (known after apply)
      + workspace_id                       = (known after apply)
    }

  # azurerm_log_analytics_workspace.appgw-law will be created
  + resource "azurerm_log_analytics_workspace" "appgw-law" {
      + allow_resource_only_permissions    = true
      + daily_quota_gb                     = -1
      + id                                 = (known after apply)
      + internet_ingestion_enabled         = true
      + internet_query_enabled             = true
      + local_authentication_disabled      = false
      + location                           = "westeurope"
      + name                               = "logs-appgw"
      + primary_shared_key                 = (sensitive value)
      + reservation_capacity_in_gb_per_day = (known after apply)
      + resource_group_name                = "rg-apim"
      + retention_in_days                  = (known after apply)
      + secondary_shared_key               = (sensitive value)
      + sku                                = (known after apply)
      + workspace_id                       = (known after apply)
    }

  # azurerm_monitor_diagnostic_setting.apim-diag will be created
  + resource "azurerm_monitor_diagnostic_setting" "apim-diag" {
      + id                             = (known after apply)
      + log_analytics_destination_type = (known after apply)
      + log_analytics_workspace_id     = (known after apply)
      + name                           = "apim-diag"
      + target_resource_id             = (known after apply)

      + enabled_log {
          + category = "allLogs"
        }

      + metric {
          + category = "AllMetrics"
          + enabled  = true
        }
    }

  # azurerm_monitor_diagnostic_setting.appgw-diag will be created
  + resource "azurerm_monitor_diagnostic_setting" "appgw-diag" {
      + id                             = (known after apply)
      + log_analytics_destination_type = (known after apply)
      + log_analytics_workspace_id     = (known after apply)
      + name                           = "appgw-diag"
      + target_resource_id             = (known after apply)

      + enabled_log {
          + category = "allLogs"
        }

      + metric {
          + category = "AllMetrics"
          + enabled  = true
        }
    }

  # azurerm_network_security_group.subnet_agw_nsg will be created
  + resource "azurerm_network_security_group" "subnet_agw_nsg" {
      + id                  = (known after apply)
      + location            = "westeurope"
      + name                = "nsg-agw"
      + resource_group_name = "rg-apim"
      + security_rule       = (known after apply)
    }

  # azurerm_network_security_group.subnet_nsg will be created
  + resource "azurerm_network_security_group" "subnet_nsg" {
      + id                  = (known after apply)
      + location            = "westeurope"
      + name                = "nsg-apim"
      + resource_group_name = "rg-apim"
      + security_rule       = (known after apply)
    }

  # azurerm_network_security_rule.rule_agw_stv1 will be created
  + resource "azurerm_network_security_rule" "rule_agw_stv1" {
      + access                      = "Allow"
      + description                 = "Client communication to AppGw Management"
      + destination_address_prefix  = "*"
      + destination_port_ranges     = [
          + "65200-65535",
        ]
      + direction                   = "Inbound"
      + id                          = (known after apply)
      + name                        = "rule-stv1"
      + network_security_group_name = "nsg-agw"
      + priority                    = 100
      + protocol                    = "Tcp"
      + resource_group_name         = "rg-apim"
      + source_address_prefix       = "GatewayManager"
      + source_port_range           = "*"
    }

  # azurerm_network_security_rule.rule_agw_stv2 will be created
  + resource "azurerm_network_security_rule" "rule_agw_stv2" {
      + access                      = "Allow"
      + description                 = "Internet Client communication AppGw"
      + destination_address_prefix  = "*"
      + destination_port_ranges     = [
          + "443",
          + "80",
        ]
      + direction                   = "Inbound"
      + id                          = (known after apply)
      + name                        = "rule-stv2"
      + network_security_group_name = "nsg-agw"
      + priority                    = 110
      + protocol                    = "Tcp"
      + resource_group_name         = "rg-apim"
      + source_address_prefix       = "*"
      + source_port_range           = "*"
    }

  # azurerm_network_security_rule.rule_kv will be created
  + resource "azurerm_network_security_rule" "rule_kv" {
      + access                      = "Allow"
      + description                 = "Access to Azure Key Vault"
      + destination_address_prefix  = "AzureKeyVault"
      + destination_port_range      = "443"
      + direction                   = "Outbound"
      + id                          = (known after apply)
      + name                        = "rule-kv"
      + network_security_group_name = "nsg-apim"
      + priority                    = 202
      + protocol                    = "Tcp"
      + resource_group_name         = "rg-apim"
      + source_address_prefix       = "VirtualNetwork"
      + source_port_range           = "*"
    }

  # azurerm_network_security_rule.rule_lb will be created
  + resource "azurerm_network_security_rule" "rule_lb" {
      + access                      = "Allow"
      + description                 = "Azure Infrastructure Load Balancer"
      + destination_address_prefix  = "AzureLoadBalancer"
      + destination_port_range      = "6390"
      + direction                   = "Inbound"
      + id                          = (known after apply)
      + name                        = "rule-lb"
      + network_security_group_name = "nsg-apim"
      + priority                    = 103
      + protocol                    = "Tcp"
      + resource_group_name         = "rg-apim"
      + source_address_prefix       = "*"
      + source_port_range           = "*"
    }

  # azurerm_network_security_rule.rule_sql will be created
  + resource "azurerm_network_security_rule" "rule_sql" {
      + access                      = "Allow"
      + description                 = "Access to Azure SQL endpoints"
      + destination_address_prefix  = "SQL"
      + destination_port_range      = "1433"
      + direction                   = "Outbound"
      + id                          = (known after apply)
      + name                        = "rule-sql"
      + network_security_group_name = "nsg-apim"
      + priority                    = 201
      + protocol                    = "Tcp"
      + resource_group_name         = "rg-apim"
      + source_address_prefix       = "VirtualNetwork"
      + source_port_range           = "*"
    }

  # azurerm_network_security_rule.rule_storage will be created
  + resource "azurerm_network_security_rule" "rule_storage" {
      + access                      = "Allow"
      + description                 = "Dependency on Azure Storage"
      + destination_address_prefix  = "Storage"
      + destination_port_range      = "443"
      + direction                   = "Outbound"
      + id                          = (known after apply)
      + name                        = "rule-storage"
      + network_security_group_name = "nsg-apim"
      + priority                    = 200
      + protocol                    = "Tcp"
      + resource_group_name         = "rg-apim"
      + source_address_prefix       = "VirtualNetwork"
      + source_port_range           = "*"
    }

  # azurerm_network_security_rule.rule_stv1 will be created
  + resource "azurerm_network_security_rule" "rule_stv1" {
      + access                      = "Allow"
      + description                 = "Management endpoint for Azure portal and PowerShell"
      + destination_address_prefix  = "ApiManagement"
      + destination_port_range      = "3443"
      + direction                   = "Inbound"
      + id                          = (known after apply)
      + name                        = "rule-stv1"
      + network_security_group_name = "nsg-apim"
      + priority                    = 102
      + protocol                    = "Tcp"
      + resource_group_name         = "rg-apim"
      + source_address_prefix       = "*"
      + source_port_range           = "*"
    }

  # azurerm_network_security_rule.rule_stv2 will be created
  + resource "azurerm_network_security_rule" "rule_stv2" {
      + access                      = "Allow"
      + description                 = "Client communication to API Management"
      + destination_address_prefix  = "Internet"
      + destination_port_ranges     = [
          + "443",
          + "80",
        ]
      + direction                   = "Inbound"
      + id                          = (known after apply)
      + name                        = "rule-stv2"
      + network_security_group_name = "nsg-apim"
      + priority                    = 100
      + protocol                    = "Tcp"
      + resource_group_name         = "rg-apim"
      + source_address_prefix       = "*"
      + source_port_range           = "*"
    }

  # azurerm_network_security_rule.rule_stv3 will be created
  + resource "azurerm_network_security_rule" "rule_stv3" {
      + access                      = "Allow"
      + description                 = "Management endpoint for Azure portal and PowerShell"
      + destination_address_prefix  = "ApiManagement"
      + destination_port_range      = "3443"
      + direction                   = "Inbound"
      + id                          = (known after apply)
      + name                        = "rule-stv3"
      + network_security_group_name = "nsg-apim"
      + priority                    = 104
      + protocol                    = "Tcp"
      + resource_group_name         = "rg-apim"
      + source_address_prefix       = "*"
      + source_port_range           = "*"
    }

  # azurerm_network_security_rule.rule_stv3_1 will be created
  + resource "azurerm_network_security_rule" "rule_stv3_1" {
      + access                      = "Allow"
      + description                 = "Management endpoint for Azure portal and PowerShell"
      + destination_address_prefix  = "VirtualNetwork"
      + destination_port_range      = "3443"
      + direction                   = "Inbound"
      + id                          = (known after apply)
      + name                        = "rule-stv3_1"
      + network_security_group_name = "nsg-apim"
      + priority                    = 101
      + protocol                    = "Tcp"
      + resource_group_name         = "rg-apim"
      + source_address_prefix       = "ApiManagement"
      + source_port_range           = "*"
    }

  # azurerm_private_dns_a_record.private_dns_a_record will be created
  + resource "azurerm_private_dns_a_record" "private_dns_a_record" {
      + fqdn                = (known after apply)
      + id                  = (known after apply)
      + name                = (known after apply)
      + records             = (known after apply)
      + resource_group_name = "rg-apim"
      + ttl                 = 300
      + zone_name           = "azure-api.net"
    }

  # azurerm_private_dns_zone.private_dns_zone will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "azure-api.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-apim"
    }

  # azurerm_private_dns_zone_virtual_network_link.dns_zone_link_hub will be created
  + resource "azurerm_private_dns_zone_virtual_network_link" "dns_zone_link_hub" {
      + id                    = (known after apply)
      + name                  = "dns-link-vnet-hub"
      + private_dns_zone_name = "azure-api.net"
      + registration_enabled  = false
      + resource_group_name   = "rg-apim"
      + virtual_network_id    = "/subscriptions/c07b4d90-1ac5-4b47-97d0-0c5bbac825d9/resourceGroups/es-connectivity-westeurope/providers/Microsoft.Network/virtualNetworks/es-hub-westeurope"
    }

  # azurerm_private_dns_zone_virtual_network_link.dns_zone_link_vnet will be created
  + resource "azurerm_private_dns_zone_virtual_network_link" "dns_zone_link_vnet" {
      + id                    = (known after apply)
      + name                  = "dns-link-vnet-ai"
      + private_dns_zone_name = "azure-api.net"
      + registration_enabled  = false
      + resource_group_name   = "rg-apim"
      + virtual_network_id    = (known after apply)
    }

  # azurerm_public_ip.example will be created
  + resource "azurerm_public_ip" "example" {
      + allocation_method       = "Static"
      + ddos_protection_mode    = "VirtualNetworkInherited"
      + fqdn                    = (known after apply)
      + id                      = (known after apply)
      + idle_timeout_in_minutes = 4
      + ip_address              = (known after apply)
      + ip_version              = "IPv4"
      + location                = "westeurope"
      + name                    = "example-pip"
      + resource_group_name     = "rg-apim"
      + sku                     = "Standard"
      + sku_tier                = "Regional"
    }

  # azurerm_resource_group.apim will be created
  + resource "azurerm_resource_group" "apim" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-apim"
    }

  # azurerm_resource_group.cognitive will be created
  + resource "azurerm_resource_group" "cognitive" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-cognitive-services"
    }

  # azurerm_resource_group.cosmosdb will be created
  + resource "azurerm_resource_group" "cosmosdb" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-azure-chatgpt-cosmosdb"
    }

  # azurerm_resource_group.network will be created
  + resource "azurerm_resource_group" "network" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-network"
    }

  # azurerm_resource_group.this will be created
  + resource "azurerm_resource_group" "this" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-openai"
    }

  # azurerm_route.rt_api_mgmt will be created
  + resource "azurerm_route" "rt_api_mgmt" {
      + address_prefix      = "ApiManagement"
      + id                  = (known after apply)
      + name                = "route-apim"
      + next_hop_type       = "Internet"
      + resource_group_name = "rg-network"
      + route_table_name    = "route-table-web"
    }

  # azurerm_route_table.rt_web will be created
  + resource "azurerm_route_table" "rt_web" {
      + disable_bgp_route_propagation = false
      + id                            = (known after apply)
      + location                      = "westeurope"
      + name                          = "route-table-web"
      + resource_group_name           = "rg-network"
      + route                         = (known after apply)
      + subnets                       = (known after apply)
    }

  # azurerm_route_table.spoke_to_hub will be created
  + resource "azurerm_route_table" "spoke_to_hub" {
      + disable_bgp_route_propagation = false
      + id                            = (known after apply)
      + location                      = "westeurope"
      + name                          = "rt_spoke_to_hub"
      + resource_group_name           = "rg-network"
      + route                         = [
          + {
              + address_prefix         = "0.0.0.0/0"
              + name                   = "route_spoke_to_hub"
              + next_hop_in_ip_address = "10.100.0.4"
              + next_hop_type          = "VirtualAppliance"
            },
        ]
      + subnets                       = (known after apply)
    }

  # azurerm_subnet_network_security_group_association.subnet_nsg_agw_assoc will be created
  + resource "azurerm_subnet_network_security_group_association" "subnet_nsg_agw_assoc" {
      + id                        = (known after apply)
      + network_security_group_id = (known after apply)
      + subnet_id                 = (known after apply)
    }

  # azurerm_subnet_network_security_group_association.subnet_nsg_assoc will be created
  + resource "azurerm_subnet_network_security_group_association" "subnet_nsg_assoc" {
      + id                        = (known after apply)
      + network_security_group_id = (known after apply)
      + subnet_id                 = (known after apply)
    }

  # azurerm_virtual_network_peering.peering-ai-to-hub will be created
  + resource "azurerm_virtual_network_peering" "peering-ai-to-hub" {
      + allow_forwarded_traffic      = false
      + allow_gateway_transit        = false
      + allow_virtual_network_access = true
      + id                           = (known after apply)
      + name                         = "peering-ai-to-hub"
      + remote_virtual_network_id    = "/subscriptions/c07b4d90-1ac5-4b47-97d0-0c5bbac825d9/resourceGroups/es-connectivity-westeurope/providers/Microsoft.Network/virtualNetworks/es-hub-westeurope"
      + resource_group_name          = "rg-network"
      + use_remote_gateways          = false
      + virtual_network_name         = "vnet-ai-lz"
    }

  # azurerm_virtual_network_peering.peering-hub-to-ai will be created
  + resource "azurerm_virtual_network_peering" "peering-hub-to-ai" {
      + allow_forwarded_traffic      = false
      + allow_gateway_transit        = false
      + allow_virtual_network_access = true
      + id                           = (known after apply)
      + name                         = "peering-hub-to-ai"
      + remote_virtual_network_id    = (known after apply)
      + resource_group_name          = "es-connectivity-westeurope"
      + use_remote_gateways          = false
      + virtual_network_name         = "es-hub-westeurope"
    }

  # random_string.azurerm_apim_name will be created
  + resource "random_string" "azurerm_apim_name" {
      + id          = (known after apply)
      + length      = 5
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = false
      + numeric     = false
      + result      = (known after apply)
      + special     = false
      + upper       = false
    }

  # random_string.azurerm_cosmosdb_account_name will be created
  + resource "random_string" "azurerm_cosmosdb_account_name" {
      + id          = (known after apply)
      + length      = 5
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = false
      + numeric     = false
      + result      = (known after apply)
      + special     = false
      + upper       = false
    }

  # random_string.resourceToken will be created
  + resource "random_string" "resourceToken" {
      + id          = (known after apply)
      + length      = 10
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + numeric     = true
      + result      = (known after apply)
      + special     = false
      + upper       = true
    }

  # module.app-service.azurerm_app_service.main will be created
  + resource "azurerm_app_service" "main" {
      + app_service_plan_id               = (known after apply)
      + app_settings                      = (known after apply)
      + client_affinity_enabled           = true
      + client_cert_enabled               = false
      + client_cert_mode                  = (known after apply)
      + custom_domain_verification_id     = (known after apply)
      + default_site_hostname             = (known after apply)
      + enabled                           = true
      + https_only                        = false
      + id                                = (known after apply)
      + key_vault_reference_identity_id   = (known after apply)
      + location                          = "westeurope"
      + name                              = (known after apply)
      + outbound_ip_address_list          = (known after apply)
      + outbound_ip_addresses             = (known after apply)
      + possible_outbound_ip_address_list = (known after apply)
      + possible_outbound_ip_addresses    = (known after apply)
      + resource_group_name               = "rg-azure-chatgpt-webapp"
      + site_credential                   = (known after apply)
      + tags                              = {
          + "ResourceName" = "app-azurechatgpt"
        }

      + auth_settings {
          + allowed_external_redirect_urls = []
          + default_provider               = "AzureActiveDirectory"
          + enabled                        = false
          + issuer                         = "https://sts.windows.net/16b3c013-d300-468d-ac64-7eda0820b6d3/"
          + token_refresh_extension_hours  = 72
          + token_store_enabled            = false
          + unauthenticated_client_action  = "RedirectToLoginPage"
        }

      + identity {
          + principal_id = (known after apply)
          + tenant_id    = (known after apply)
          + type         = "SystemAssigned"
        }

      + site_config {
          + acr_use_managed_identity_credentials = false
          + always_on                            = true
          + dotnet_framework_version             = "v2.0"
          + ftps_state                           = "FtpsOnly"
          + http2_enabled                        = false
          + ip_restriction                       = []
          + linux_fx_version                     = (known after apply)
          + local_mysql_enabled                  = (known after apply)
          + managed_pipeline_mode                = "Integrated"
          + min_tls_version                      = "1.2"
          + number_of_workers                    = (known after apply)
          + remote_debugging_enabled             = false
          + remote_debugging_version             = (known after apply)
          + scm_ip_restriction                   = []
          + scm_type                             = (known after apply)
          + scm_use_main_ip_restriction          = false
          + use_32_bit_worker_process            = true
          + vnet_route_all_enabled               = (known after apply)
          + websockets_enabled                   = (known after apply)
          + windows_fx_version                   = (known after apply)
        }
    }

  # module.app-service.azurerm_app_service_plan.main will be created
  + resource "azurerm_app_service_plan" "main" {
      + id                           = (known after apply)
      + is_xenon                     = false
      + kind                         = "Linux"
      + location                     = "westeurope"
      + maximum_elastic_worker_count = (known after apply)
      + maximum_number_of_workers    = (known after apply)
      + name                         = "plan-azurechatgpt"
      + reserved                     = true
      + resource_group_name          = "rg-azure-chatgpt-webapp"
      + tags                         = {
          + "ResourceName" = ""
        }

      + sku {
          + capacity = (known after apply)
          + size     = "P0v3"
          + tier     = "Premium0V3"
        }
    }

  # module.app-service.azurerm_app_service_virtual_network_swift_connection.main[0] will be created
  + resource "azurerm_app_service_virtual_network_swift_connection" "main" {
      + app_service_id = (known after apply)
      + id             = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.app-service.azurerm_application_insights.main[0] will be created
  + resource "azurerm_application_insights" "main" {
      + app_id                                = (known after apply)
      + application_type                      = "web"
      + connection_string                     = (sensitive value)
      + daily_data_cap_in_gb                  = (known after apply)
      + daily_data_cap_notifications_disabled = (known after apply)
      + disable_ip_masking                    = false
      + force_customer_storage_for_profiler   = false
      + id                                    = (known after apply)
      + instrumentation_key                   = (sensitive value)
      + internet_ingestion_enabled            = true
      + internet_query_enabled                = true
      + local_authentication_disabled         = false
      + location                              = "westeurope"
      + name                                  = "appi-azchgptshared"
      + resource_group_name                   = "rg-azure-chatgpt-webapp"
      + retention_in_days                     = 90
      + sampling_percentage                   = 100
      + tags                                  = {
          + "ResourceName" = "azchgptshared"
        }
    }

  # module.app-service.azurerm_resource_group.rg[0] will be created
  + resource "azurerm_resource_group" "rg" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-azure-chatgpt-webapp"
      + tags     = {
          + "ResourceName" = "rg-azure-chatgpt-webapp"
        }
    }

  # module.app-service.random_string.azurerm_appservice_name will be created
  + resource "random_string" "azurerm_appservice_name" {
      + id          = (known after apply)
      + length      = 5
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = false
      + numeric     = false
      + result      = (known after apply)
      + special     = false
      + upper       = false
    }

  # module.cognitive_search.azurerm_search_service.search will be created
  + resource "azurerm_search_service" "search" {
      + customer_managed_key_enforcement_enabled = false
      + hosting_mode                             = "default"
      + id                                       = (known after apply)
      + local_authentication_enabled             = true
      + location                                 = "westeurope"
      + name                                     = (known after apply)
      + partition_count                          = 2
      + primary_key                              = (sensitive value)
      + public_network_access_enabled            = true
      + query_keys                               = (known after apply)
      + replica_count                            = 2
      + resource_group_name                      = "rg-cognitive-services"
      + secondary_key                            = (sensitive value)
      + sku                                      = "standard"
    }

  # module.cognitive_search.random_string.azurerm_search_service_name will be created
  + resource "random_string" "azurerm_search_service_name" {
      + id          = (known after apply)
      + length      = 25
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = false
      + numeric     = false
      + result      = (known after apply)
      + special     = false
      + upper       = false
    }

  # module.cognitive_services.azurerm_cognitive_account.cognitive_service will be created
  + resource "azurerm_cognitive_account" "cognitive_service" {
      + endpoint                           = (known after apply)
      + id                                 = (known after apply)
      + kind                               = "CognitiveServices"
      + local_auth_enabled                 = true
      + location                           = "westeurope"
      + name                               = (known after apply)
      + outbound_network_access_restricted = false
      + primary_access_key                 = (sensitive value)
      + public_network_access_enabled      = true
      + resource_group_name                = "rg-cognitive-services"
      + secondary_access_key               = (sensitive value)
      + sku_name                           = "S0"
    }

  # module.cognitive_services.random_string.azurerm_cognitive_account_name will be created
  + resource "random_string" "azurerm_cognitive_account_name" {
      + id          = (known after apply)
      + length      = 13
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = false
      + numeric     = false
      + result      = (known after apply)
      + special     = false
      + upper       = false
    }

  # module.openai.data.azurerm_resource_group.pe_vnet_rg["pe_endpoint"] will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "azurerm_resource_group" "pe_vnet_rg" {
      + id         = (known after apply)
      + location   = (known after apply)
      + managed_by = (known after apply)
      + name       = "rg-network"
      + tags       = (known after apply)
    }

  # module.openai.data.azurerm_resource_group.this will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "azurerm_resource_group" "this" {
      + id         = (known after apply)
      + location   = (known after apply)
      + managed_by = (known after apply)
      + name       = "rg-openai"
      + tags       = (known after apply)
    }

  # module.openai.data.azurerm_subnet.pe_subnet["pe_endpoint"] will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "azurerm_subnet" "pe_subnet" {
      + address_prefix                                 = (known after apply)
      + address_prefixes                               = (known after apply)
      + enforce_private_link_endpoint_network_policies = (known after apply)
      + enforce_private_link_service_network_policies  = (known after apply)
      + id                                             = (known after apply)
      + name                                           = "snet_ai"
      + network_security_group_id                      = (known after apply)
      + private_endpoint_network_policies_enabled      = (known after apply)
      + private_link_service_network_policies_enabled  = (known after apply)
      + resource_group_name                            = "rg-network"
      + route_table_id                                 = (known after apply)
      + service_endpoints                              = (known after apply)
      + virtual_network_name                           = "vnet-ai-lz"
    }

  # module.openai.data.azurerm_virtual_network.vnet["pe_endpoint"] will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "azurerm_virtual_network" "vnet" {
      + address_space           = (known after apply)
      + dns_servers             = (known after apply)
      + guid                    = (known after apply)
      + id                      = (known after apply)
      + location                = (known after apply)
      + name                    = "vnet-ai-lz"
      + resource_group_name     = "rg-network"
      + subnets                 = (known after apply)
      + tags                    = (known after apply)
      + vnet_peerings           = (known after apply)
      + vnet_peerings_addresses = (known after apply)
    }

  # module.openai.azurerm_cognitive_account.this will be created
  + resource "azurerm_cognitive_account" "this" {
      + custom_subdomain_name              = (known after apply)
      + endpoint                           = (known after apply)
      + id                                 = (known after apply)
      + kind                               = "OpenAI"
      + local_auth_enabled                 = true
      + location                           = "westeurope"
      + name                               = (known after apply)
      + outbound_network_access_restricted = true
      + primary_access_key                 = (sensitive value)
      + public_network_access_enabled      = false
      + resource_group_name                = "rg-openai"
      + secondary_access_key               = (sensitive value)
      + sku_name                           = "S0"
    }

  # module.openai.azurerm_cognitive_deployment.this["gpt-35-turbo"] will be created
  + resource "azurerm_cognitive_deployment" "this" {
      + cognitive_account_id = (known after apply)
      + id                   = (known after apply)
      + name                 = "gpt-35-turbo2"

      + model {
          + format  = "OpenAI"
          + name    = "gpt-35-turbo"
          + version = "0301"
        }

      + scale {
          + capacity = 1
          + type     = "Standard"
        }
    }

  # module.openai.azurerm_private_dns_zone.dns_zone[0] will be created
  + resource "azurerm_private_dns_zone" "dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.openai.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-openai"
    }

  # module.openai.azurerm_private_dns_zone_virtual_network_link.dns_zone_link["pe_endpoint"] will be created
  + resource "azurerm_private_dns_zone_virtual_network_link" "dns_zone_link" {
      + id                    = (known after apply)
      + name                  = (known after apply)
      + private_dns_zone_name = "privatelink.openai.azure.com"
      + registration_enabled  = false
      + resource_group_name   = "rg-openai"
      + virtual_network_id    = (known after apply)
    }

  # module.openai.azurerm_private_dns_zone_virtual_network_link.dns_zone_link_hub["pe_endpoint"] will be created
  + resource "azurerm_private_dns_zone_virtual_network_link" "dns_zone_link_hub" {
      + id                    = (known after apply)
      + name                  = (known after apply)
      + private_dns_zone_name = "privatelink.openai.azure.com"
      + registration_enabled  = false
      + resource_group_name   = "rg-openai"
      + virtual_network_id    = "/subscriptions/c07b4d90-1ac5-4b47-97d0-0c5bbac825d9/resourceGroups/es-connectivity-westeurope/providers/Microsoft.Network/virtualNetworks/es-hub-westeurope"
    }

  # module.openai.azurerm_private_endpoint.this["pe_endpoint"] will be created
  + resource "azurerm_private_endpoint" "this" {
      + custom_dns_configs       = (known after apply)
      + id                       = (known after apply)
      + location                 = (known after apply)
      + name                     = "pe_one"
      + network_interface        = (known after apply)
      + private_dns_zone_configs = (known after apply)
      + resource_group_name      = "rg-network"
      + subnet_id                = (known after apply)

      + private_dns_zone_group {
          + id                   = (known after apply)
          + name                 = "privatelink.openai.azure.com"
          + private_dns_zone_ids = (known after apply)
        }

      + private_service_connection {
          + is_manual_connection           = false
          + name                           = "pe_one_connection"
          + private_connection_resource_id = (known after apply)
          + private_ip_address             = (known after apply)
          + subresource_names              = [
              + "account",
            ]
        }
    }

  # module.openai.random_integer.random_number_1 will be created
  + resource "random_integer" "random_number_1" {
      + id     = (known after apply)
      + max    = 99
      + min    = 10
      + result = (known after apply)
    }

  # module.openai.random_integer.random_number_2 will be created
  + resource "random_integer" "random_number_2" {
      + id     = (known after apply)
      + max    = 99
      + min    = 10
      + result = (known after apply)
    }

  # module.openai.random_integer.this will be created
  + resource "random_integer" "this" {
      + id     = (known after apply)
      + max    = 999999
      + min    = 100000
      + result = (known after apply)
    }

  # module.vnet_ai.azurerm_subnet.subnet["snet_ag"] will be created
  + resource "azurerm_subnet" "subnet" {
      + address_prefixes                               = [
          + "10.52.16.0/23",
        ]
      + enforce_private_link_endpoint_network_policies = (known after apply)
      + enforce_private_link_service_network_policies  = (known after apply)
      + id                                             = (known after apply)
      + name                                           = "snet_ag"
      + private_endpoint_network_policies_enabled      = true
      + private_link_service_network_policies_enabled  = true
      + resource_group_name                            = "rg-network"
      + virtual_network_name                           = "vnet-ai-lz"
    }

  # module.vnet_ai.azurerm_subnet.subnet["snet_ai"] will be created
  + resource "azurerm_subnet" "subnet" {
      + address_prefixes                               = [
          + "10.52.8.0/21",
        ]
      + enforce_private_link_endpoint_network_policies = (known after apply)
      + enforce_private_link_service_network_policies  = (known after apply)
      + id                                             = (known after apply)
      + name                                           = "snet_ai"
      + private_endpoint_network_policies_enabled      = true
      + private_link_service_network_policies_enabled  = true
      + resource_group_name                            = "rg-network"
      + service_endpoints                              = [
          + "Microsoft.CognitiveServices",
        ]
      + virtual_network_name                           = "vnet-ai-lz"
    }

  # module.vnet_ai.azurerm_subnet.subnet["snet_chatgpt"] will be created
  + resource "azurerm_subnet" "subnet" {
      + address_prefixes                               = [
          + "10.52.18.0/23",
        ]
      + enforce_private_link_endpoint_network_policies = (known after apply)
      + enforce_private_link_service_network_policies  = (known after apply)
      + id                                             = (known after apply)
      + name                                           = "snet_chatgpt"
      + private_endpoint_network_policies_enabled      = true
      + private_link_service_network_policies_enabled  = true
      + resource_group_name                            = "rg-network"
      + virtual_network_name                           = "vnet-ai-lz"

      + delegation {
          + name = "Microsoft.Web/serverFarms"

          + service_delegation {
              + name = "Microsoft.Web/serverFarms"
            }
        }
    }

  # module.vnet_ai.azurerm_subnet.subnet["snet_database"] will be created
  + resource "azurerm_subnet" "subnet" {
      + address_prefixes                               = [
          + "10.52.4.0/22",
        ]
      + enforce_private_link_endpoint_network_policies = (known after apply)
      + enforce_private_link_service_network_policies  = (known after apply)
      + id                                             = (known after apply)
      + name                                           = "snet_database"
      + private_endpoint_network_policies_enabled      = true
      + private_link_service_network_policies_enabled  = true
      + resource_group_name                            = "rg-network"
      + virtual_network_name                           = "vnet-ai-lz"
    }

  # module.vnet_ai.azurerm_subnet.subnet["snet_services"] will be created
  + resource "azurerm_subnet" "subnet" {
      + address_prefixes                               = [
          + "10.52.0.0/23",
        ]
      + enforce_private_link_endpoint_network_policies = (known after apply)
      + enforce_private_link_service_network_policies  = (known after apply)
      + id                                             = (known after apply)
      + name                                           = "snet_services"
      + private_endpoint_network_policies_enabled      = true
      + private_link_service_network_policies_enabled  = true
      + resource_group_name                            = "rg-network"
      + service_endpoints                              = [
          + "Microsoft.KeyVault",
        ]
      + virtual_network_name                           = "vnet-ai-lz"
    }

  # module.vnet_ai.azurerm_subnet.subnet["snet_web"] will be created
  + resource "azurerm_subnet" "subnet" {
      + address_prefixes                               = [
          + "10.52.2.0/23",
        ]
      + enforce_private_link_endpoint_network_policies = (known after apply)
      + enforce_private_link_service_network_policies  = (known after apply)
      + id                                             = (known after apply)
      + name                                           = "snet_web"
      + private_endpoint_network_policies_enabled      = true
      + private_link_service_network_policies_enabled  = true
      + resource_group_name                            = "rg-network"
      + service_endpoints                              = [
          + "Microsoft.EventHub",
          + "Microsoft.KeyVault",
          + "Microsoft.ServiceBus",
          + "Microsoft.Sql",
          + "Microsoft.Storage",
        ]
      + virtual_network_name                           = "vnet-ai-lz"
    }

  # module.vnet_ai.azurerm_subnet_route_table_association.vnet["snet_ai"] will be created
  + resource "azurerm_subnet_route_table_association" "vnet" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vnet_ai.azurerm_subnet_route_table_association.vnet["snet_chatgpt"] will be created
  + resource "azurerm_subnet_route_table_association" "vnet" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vnet_ai.azurerm_subnet_route_table_association.vnet["snet_database"] will be created
  + resource "azurerm_subnet_route_table_association" "vnet" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vnet_ai.azurerm_subnet_route_table_association.vnet["snet_services"] will be created
  + resource "azurerm_subnet_route_table_association" "vnet" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vnet_ai.azurerm_subnet_route_table_association.vnet["snet_web"] will be created
  + resource "azurerm_subnet_route_table_association" "vnet" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vnet_ai.azurerm_virtual_network.vnet will be created
  + resource "azurerm_virtual_network" "vnet" {
      + address_space       = [
          + "10.52.0.0/16",
        ]
      + dns_servers         = (known after apply)
      + guid                = (known after apply)
      + id                  = (known after apply)
      + location            = "westeurope"
      + name                = "vnet-ai-lz"
      + resource_group_name = "rg-network"
      + subnet              = (known after apply)
    }

Plan: 72 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + test = (known after apply)

Warning: Reference to undefined provider

  on ai.tf line 15, in module "cognitive_services":
  15:     azurerm              = azurerm

There is no explicit declaration for local provider name "azurerm" in module.cognitive_services, so Terraform is
assuming you mean to pass a configuration for "hashicorp/azurerm".

If you also control the child module, add a required_providers entry named "azurerm" with the source address
"hashicorp/azurerm".

(and one more similar warning elsewhere)

Warning: Deprecated Resource

  with module.app-service.azurerm_app_service_plan.main,
  on ../../Modules/Core/AppService/main.tf line 159, in resource "azurerm_app_service_plan" "main":
 159: resource "azurerm_app_service_plan" "main" {

The `azurerm_app_service_plan` resource has been superseded by the `azurerm_service_plan` resource. Whilst this
resource will continue to be available in the 2.x and 3.x releases it is feature-frozen for compatibility purposes,
will no longer receive any updates and will be removed in a future major release of the Azure Provider.

(and 3 more similar warnings elsewhere)

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
